name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    uses: ./.github/workflows/test.yml

  prepare-release:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      current_version: ${{ steps.version.outputs.current_version }}
      tag_exists: ${{ steps.tag_check.outputs.tag_exists }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - id: version
        run: |
          CURRENT_VERSION=$(jq -r '.version' package.json)
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - id: tag_check
        run: |
          if git rev-parse "v${{ steps.version.outputs.current_version }}" >/dev/null 2>&1; then
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi

  build-and-release:
    runs-on: ubuntu-latest
    needs: prepare-release
    if: ${{ needs.prepare-release.outputs.tag_exists == 'false' }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"

      - name: Build files
        run: |
          npm ci
          npm run build

      - name: Compress the build artifact
        run: |
          mv dist/index.js dist/index.mjs
          gzip -c dist/index.mjs > index.mjs.gz

      - name: Add Tag
        run: |
          git tag "v${{ needs.prepare-release.outputs.current_version }}"
          git push origin "v${{ needs.prepare-release.outputs.current_version }}"

      - name: Create Release to GitHub
        run: gh release create "v${{ needs.prepare-release.outputs.current_version }}" index.mjs.gz --generate-notes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}

  deploy-webhook:
    runs-on: ubuntu-latest
    needs: build-and-release
    steps:
      - env:
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}
        run: |
          TIMESTAMP=$(date +%s)
          SIGNATURE=$(echo -n "$TIMESTAMP" | openssl dgst -sha256 -hmac "$WEBHOOK_SECRET" | awk '{print $2}')
          curl -f -X POST "$WEBHOOK_URL" \
                -H "X-Signature: $SIGNATURE" \
                -H "X-Timestamp: $TIMESTAMP"
