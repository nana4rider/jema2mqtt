name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    uses: ./.github/workflows/test.yml

  get-version:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      current: ${{ steps.current.outputs.version }}
      previous: ${{ steps.previous.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - id: current
        run: |
          VERSION=$(jq -r '.version' package.json)
          echo "current: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - id: previous
        run: |
          VERSION=$(git show HEAD~1:package.json | jq -r '.version')
          echo "previous: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  build-and-release:
    runs-on: ubuntu-latest
    needs: get-version
    if: ${{ github.event_name == 'workflow_dispatch' || needs.get-version.outputs.current != needs.get-version.outputs.previous }}
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"

      - name: Build files
        run: |
          npm ci
          npm run build
          git add dist/

      - name: Commit and Push files
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "$(git --no-pager log --format=format:'%an' -n 1)"
          git config user.email "$(git --no-pager log --format=format:'%ae' -n 1)"
          git commit -m "[skip ci] update build files"
          git push origin main

      - name: Add Tag
        run: |
          git tag "v${{ needs.get-version.outputs.current }}"
          git push origin "v${{ needs.get-version.outputs.current }}"

      - name: Create Release to GitHub
        run: gh release create "v${{ needs.get-version.outputs.current }}" --generate-notes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}

  deploy-webhook:
    runs-on: ubuntu-latest
    needs: build-and-release
    steps:
      - env:
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}
        run: |
          TIMESTAMP=$(date +%s)
          SIGNATURE=$(echo -n "$TIMESTAMP" | openssl dgst -sha256 -hmac "$WEBHOOK_SECRET" | awk '{print $2}')
          curl -X POST "$WEBHOOK_URL" \
               -H "X-Signature: $SIGNATURE" \
               -H "X-Timestamp: $TIMESTAMP"
